#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <pthread.h>

// 定义端口号、最大客户端数量和缓冲区大小
#define PORT 12345
#define MAX_CLIENTS 100
#define BUFFER_SIZE 1024

// 定义客户端结构体，包含socket和昵称
typedef struct {
    int socket;
    char nickname[30];
} Client;

Client clients[MAX_CLIENTS];  // 用于存储所有连接的客户端
int client_count = 0;  // 当前连接的客户端数量
pthread_mutex_t clients_mutex = PTHREAD_MUTEX_INITIALIZER;  // 互斥锁用于保护clients数组

// 广播消息给所有客户端，但不包括发送者
void broadcast_message(char *message, int sender_socket) {
    pthread_mutex_lock(&clients_mutex);  // 加锁
    for (int i = 0; i < client_count; ++i) {
        if (clients[i].socket != sender_socket) {
            if (send(clients[i].socket, message, strlen(message), 0) < 0) {
                perror("send");
                continue;
            }
        }
    }
    pthread_mutex_unlock(&clients_mutex);  // 解锁
}

// 处理单个客户端的连接
void handle_client(int client_socket) {
    char buffer[BUFFER_SIZE];
    char nickname[30];
    int leave_flag = 0;  // 标记客户端是否离开

    // 注册或登录客户端
    if (recv(client_socket, nickname, 30, 0) <= 0 || strlen(nickname) < 2 || strlen(nickname) >= 30 - 1) {
        printf("Enter the name correctly\n");
        leave_flag = 1;
    } else {
        pthread_mutex_lock(&clients_mutex);  // 加锁
        strcpy(clients[client_count].nickname, nickname);
        clients[client_count].socket = client_socket;
        client_count++;
        pthread_mutex_unlock(&clients_mutex);  // 解锁
        printf("%s has joined\n", nickname);
    }

    while (1) {
        if (leave_flag) {
            break;
        }

        // 接收客户端消息
        int receive = recv(client_socket, buffer, BUFFER_SIZE, 0);
        if (receive > 0) {
            if (strlen(buffer) > 0) {
                broadcast_message(buffer, client_socket);  // 广播消息给其他客户端
                printf("%s\n", buffer);
            }
        } else if (receive == 0 || strcmp(buffer, "exit") == 0) {
            printf("%s has left\n", nickname);
            leave_flag = 1;
        } else {
            perror("recv");
            leave_flag = 1;
        }

        bzero(buffer, BUFFER_SIZE);  // 清空缓冲区
    }

    close(client_socket);  // 关闭客户端socket
    pthread_mutex_lock(&clients_mutex);  // 加锁
    for (int i = 0; i < client_count; ++i) {
        if (clients[i].socket == client_socket) {
            for (int j = i; j < client_count - 1; ++j) {
                clients[j] = clients[j + 1];
            }
            client_count--;
            break;
        }
    }
    pthread_mutex_unlock(&clients_mutex);  // 解锁
}

int main() {
    int server_socket, client_socket;
    struct sockaddr_in server_addr, client_addr;
    pthread_t tid;

    // 创建服务器socket
    server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (server_socket < 0) {
        perror("Socket error");
        exit(1);
    }

    // 设置服务器地址和端口
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);

    // 绑定服务器socket到指定地址和端口
    if (bind(server_socket, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {
        perror("Bind error");
        exit(1);
    }

    // 开始监听连接
    if (listen(server_socket, 10) < 0) {
        perror("Listen error");
        exit(1);
    }

    printf("=== WELCOME TO THE CHATROOM ===\n");

    while (1) {
        socklen_t client_len = sizeof(client_addr);
        client_socket = accept(server_socket, (struct sockaddr*)&client_addr, &client_len);  // 接受客户端连接

        if (client_socket < 0) {
            perror("Accept error");
            exit(1);
        }

        if (client_count + 1 == MAX_CLIENTS) {
            printf("Max clients reached. Rejected: ");
            printf(": %d\n", client_socket);
            close(client_socket);
            continue;
        }

        pthread_create(&tid, NULL, (void *)handle_client, (void *)&client_socket);  // 创建新线程处理客户端连接

        sleep(1);
    }

    return 0;
}
